/**
 * Copyright (C) 2009 Lambico Team <lucio.benfante@gmail.com>
 *
 * This file is part of Lambico Spring - Hibernate.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.lambico.spring.dao.hibernate;

import javax.annotation.Resource;
import org.hibernate.stat.Statistics;
import org.lambico.dao.spring.hibernate.HibernateGenericDao;
import org.lambico.spring.dao.hibernate.dao.CachedEntityTCDao;
import org.lambico.spring.dao.hibernate.po.CachedEntityTC;
import org.lambico.test.spring.hibernate.DBTest;

/**
 * Tests on caching DAO methods.
 *
 * @author <a href="mailto:lucio@benfante.com">Lucio Benfante</a>
 * @version $Revision$
 */
public class CachedEntityTCTest extends DBTest {

    public static final int COUNT = 1000;
    public static final String FIELD = "%67%";
    @Resource
    private CachedEntityTCDao cachedEntityTCDao;

    @Override
    protected void prepareTestInstance() throws Exception {
        super.prepareTestInstance();
        for (long i = 0; i < COUNT; i++) {
            cachedEntityTCDao.create(new CachedEntityTC("" + i, "" + i, "" + i, i));
        }
    }

    @Override
    protected void endTransaction() {
        cachedEntityTCDao.deleteAll();
        super.endTransaction();
    }

    public void testAllSize() {
        assertSize(COUNT, cachedEntityTCDao.findAll());
    }

    public void test1() {
        final Statistics statistics =
                ((HibernateGenericDao) cachedEntityTCDao).getCustomizedHibernateTemplate().
                getSessionFactory().getStatistics();
        // Caches due to @CachteIt annotation on method
        cachedEntityTCDao.findByFieldOne(FIELD);
        long startCacheItCount = statistics.getQueryCacheHitCount();
        cachedEntityTCDao.findByFieldOne(FIELD);
        long citCacheItAutoGenerated =
                statistics.getQueryCacheHitCount() - startCacheItCount;

        // Caches due to @CachteIt annotation on method
        cachedEntityTCDao.findAll();
        startCacheItCount = statistics.getQueryCacheHitCount();
        cachedEntityTCDao.findAll();
        long citCacheItOnClass =
                statistics.getQueryCacheHitCount() - startCacheItCount;

        // Caches due to NamedQuery hints
        cachedEntityTCDao.findCacheByFieldTwo(FIELD);
        startCacheItCount = statistics.getQueryCacheHitCount();
        cachedEntityTCDao.findCacheByFieldTwo(FIELD);
        long citCacheItNamedQuery =
                statistics.getQueryCacheHitCount() - startCacheItCount;

        // Senza la cache. Non viene messa in cache.
        cachedEntityTCDao.findNoCacheByFieldThree(FIELD);
        startCacheItCount = statistics.getQueryCacheHitCount();
        cachedEntityTCDao.findNoCacheByFieldThree(FIELD);
        long citNoCache =
                statistics.getQueryCacheHitCount() - startCacheItCount;

        logger.info("NoCache: " + citNoCache + ", Hint: "
                + citCacheItNamedQuery + ", CacheIt: "
                + citCacheItAutoGenerated + ", CacheItOnClass: "
                + citCacheItOnClass);
        assertEquals(1, citCacheItAutoGenerated);
        assertEquals(1, citCacheItOnClass);
        assertEquals(1, citCacheItNamedQuery);
        assertEquals(0, citNoCache);
    }
}
